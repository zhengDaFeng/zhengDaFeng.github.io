<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分类器的应用示例（一）</title>
      <link href="/2019/04/07/Halcon%20%E7%A4%BA%E4%BE%8B%20-%20%E5%88%86%E7%B1%BB%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/04/07/Halcon%20%E7%A4%BA%E4%BE%8B%20-%20%E5%88%86%E7%B1%BB%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>该示例通过对象的形状特征对金属部件进行分类。<br><a id="more"></a></p><h1 id="通用步骤"><a href="#通用步骤" class="headerlink" title="通用步骤"></a>通用步骤</h1><h2 id="Step-1-创建分类器"><a href="#Step-1-创建分类器" class="headerlink" title="Step 1: 创建分类器"></a>Step 1: 创建分类器</h2><p>通过算子 create_class_mlp 创建一个 MLP 分类器，并获取其句柄，用于后续步骤。</p><h2 id="Step-2-向分类器中添加训练样本"><a href="#Step-2-向分类器中添加训练样本" class="headerlink" title="Step 2: 向分类器中添加训练样本"></a>Step 2: 向分类器中添加训练样本</h2><p>准备一些训练用的图像，每个图像包含已知的属于同一类型的若干个金属部件。准备一个存放上述训练图像类型索引的元组。使用 Blob 分析将对象分离，获取对象特征，并通过算子 add_sample_class_mlp 添加到分类器中。</p><h2 id="Step-3-训练分类器"><a href="#Step-3-训练分类器" class="headerlink" title="Step 3: 训练分类器"></a>Step 3: 训练分类器</h2><p>通过算子 train_class_mlp 训练分类器</p><h2 id="Step-4-对新物体进行分类"><a href="#Step-4-对新物体进行分类" class="headerlink" title="Step 4: 对新物体进行分类"></a>Step 4: 对新物体进行分类</h2><p>使用 Blob 分析将图像中的物体进行分离，获取对象特征，并通过算子 classify_class_mlp 对新物体进行分类</p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><figure class="hljs highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">* This example program shows how to classify different</span><br><span class="hljs-comment">* metal parts using a general MLP classification</span><br><span class="hljs-comment">* </span><br>dev_update_off ()<br>dev_close_window ()<br>dev_open_window (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">640</span>, <span class="hljs-number">480</span>, <span class="hljs-string">'black'</span>, WindowHandle)<br>set_display_font (WindowHandle, <span class="hljs-number">16</span>, <span class="hljs-string">'mono'</span>, <span class="hljs-string">'true'</span>, <span class="hljs-string">'false'</span>)<br>dev_set_colored (<span class="hljs-number">6</span>)<br>dev_set_draw (<span class="hljs-string">'margin'</span>)<br>dev_set_line_width (<span class="hljs-number">3</span>)<br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Create an MLP classifier</span><br>create_class_mlp (<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'softmax'</span>, <span class="hljs-string">'normalization'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">42</span>, MLPHandle)<br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Add training samples to the classifier</span><br>FileNames := [<span class="hljs-string">'nuts_01'</span>,<span class="hljs-string">'nuts_02'</span>,<span class="hljs-string">'nuts_03'</span>,<span class="hljs-string">'washers_01'</span>,<span class="hljs-string">'washers_02'</span>,<span class="hljs-string">'washers_03'</span>,<span class="hljs-string">'retainers_01'</span>,<span class="hljs-string">'retainers_02'</span>,<span class="hljs-string">'retainers_03'</span>]<br>Classes := [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]<br><span class="hljs-keyword">for</span> J := <span class="hljs-number">0</span> to |FileNames| - <span class="hljs-number">1</span> by <span class="hljs-number">1</span><br>    read_image (Image, <span class="hljs-string">'rings/'</span> + FileNames[J])<br>    dev_display (Image)<br>    dev_set_colored (<span class="hljs-number">6</span>)<br>    segment (Image, Objects)<br>    dev_display (Objects)<br>    dev_set_color (<span class="hljs-string">'black'</span>)<br>    disp_message (WindowHandle, <span class="hljs-string">'Add Sample '</span> + J + <span class="hljs-string">', Class Index '</span> + Classes[J], <span class="hljs-string">'window'</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'black'</span>, <span class="hljs-string">'true'</span>)<br>    add_samples (Objects, MLPHandle, Classes[J])<br>    disp_continue_message (WindowHandle, <span class="hljs-string">'black'</span>, <span class="hljs-string">'true'</span>)<br>    stop ()<br>endfor<br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Train the classifier with the training samples</span><br>dev_clear_window ()<br>dev_set_color (<span class="hljs-string">'black'</span>)<br><span class="hljs-function"><span class="hljs-title">disp_message</span></span> (WindowHandle, <span class="hljs-string">'Training...'</span>, <span class="hljs-string">'window'</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'black'</span>, <span class="hljs-string">'true'</span>)<br>train_class_mlp (MLPHandle, <span class="hljs-number">200</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.01</span>, Error, ErrorLog)<br>clear_samples_class_mlp (MLPHandle)<br><span class="hljs-function"><span class="hljs-title">disp_message</span></span> (WindowHandle, <span class="hljs-string">'Training... completed'</span>, <span class="hljs-string">'window'</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'black'</span>, <span class="hljs-string">'true'</span>)<br>disp_continue_message (WindowHandle, <span class="hljs-string">'black'</span>, <span class="hljs-string">'true'</span>)<br>stop ()<br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Classify objects</span><br>dev_set_draw (<span class="hljs-string">'fill'</span>)<br><span class="hljs-keyword">for</span> J := <span class="hljs-number">1</span> to <span class="hljs-number">4</span> by <span class="hljs-number">1</span><br>    read_image (Image, <span class="hljs-string">'rings/mixed_'</span> + J<span class="hljs-symbol">$</span><span class="hljs-string">'02d'</span>)<br>    dev_display (Image)<br>    dev_set_color (<span class="hljs-string">'black'</span>)<br>    dev_set_draw (<span class="hljs-string">'margin'</span>)<br>    disp_message (WindowHandle, <span class="hljs-string">'Classifiy Image'</span> + J, <span class="hljs-string">'window'</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'black'</span>, <span class="hljs-string">'true'</span>)<br>    segment (Image, Objects)<br>    classify (Objects, MLPHandle, Classes)<br>    disp_obj_class (Objects, Classes)<br>    <span class="hljs-keyword">if</span> (J &lt; <span class="hljs-number">4</span>)<br>        disp_continue_message (WindowHandle, <span class="hljs-string">'black'</span>, <span class="hljs-string">'true'</span>)<br>        stop ()<br>    endif<br>endfor<br>stop ()<br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Clear the classifier from memory</span><br>clear_class_mlp (MLPHandle)<br></code></pre></td></tr></table></figure><h2 id="segment"><a href="#segment" class="headerlink" title="segment"></a>segment</h2><figure class="hljs highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">binary_threshold (<span class="hljs-name">Image</span>, Region, 'max_separability', 'dark', UsedThreshold)<br>connection (<span class="hljs-name">Region</span>, ConnectedRegions)<br>fill_up (<span class="hljs-name">ConnectedRegions</span>, Regions)<br>return ()<br></code></pre></td></tr></table></figure><h2 id="add-samples"><a href="#add-samples" class="headerlink" title="add_samples"></a>add_samples</h2><figure class="hljs highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">count_obj (Regions, <span class="hljs-built_in">Number</span>)<br><span class="hljs-keyword">for</span> J := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">Number</span> by <span class="hljs-number">1</span><br>    select_obj (Regions, Region, J)<br>    get_features (Region, Features)<br>    add_sample_class_mlp (MLPHandle, Features, Class)<br>endfor<br><span class="hljs-keyword">return</span> ()<br></code></pre></td></tr></table></figure><h2 id="get-features"><a href="#get-features" class="headerlink" title="get_features"></a>get_features</h2><figure class="hljs highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">select_obj</span> (Region, SingleRegion, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">circularity</span> (SingleRegion, Circularity)<br><span class="hljs-built_in">roundness</span> (SingleRegion, Distance, Sigma, Roundness, Sides)<br><span class="hljs-built_in">moments_region_central_invar</span> (SingleRegion, PSI1, PSI2, PSI3, PSI4)<br>Features := [Circularity,Roundness,PSI1,PSI2,PSI3,PSI4]<br><span class="hljs-keyword">return</span> ()<br></code></pre></td></tr></table></figure><h2 id="classify"><a href="#classify" class="headerlink" title="classify"></a>classify</h2><figure class="hljs highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">count_obj (Regions, Number)<br><span class="hljs-keyword">Classes</span> := []<br><span class="hljs-keyword">for</span> J := <span class="hljs-number">1</span> to Number <span class="hljs-built_in">by</span> <span class="hljs-number">1</span><br>    select_obj (Regions, Region, J)<br>    get_features (Region, Features)<br>    classify_class_mlp (MLPHandle, Features, <span class="hljs-number">1</span>, <span class="hljs-keyword">Class</span>, Confidence)<br>    <span class="hljs-keyword">Classes</span> := [<span class="hljs-keyword">Classes</span>,<span class="hljs-keyword">Class</span>]<br>endfor<br><span class="hljs-keyword">return</span> ()<br></code></pre></td></tr></table></figure><h2 id="disp-obj-class"><a href="#disp-obj-class" class="headerlink" title="disp_obj_class"></a>disp_obj_class</h2><figure class="hljs highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">count_obj (Regions, <span class="hljs-built_in">Number</span>)<br>Colors := [<span class="hljs-string">'yellow'</span>,<span class="hljs-string">'magenta'</span>,<span class="hljs-string">'green'</span>]<br><span class="hljs-keyword">for</span> J := <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">Number</span> by <span class="hljs-number">1</span><br>    select_obj (Regions, Region, J)<br>    dev_set_color (Colors[Classes[J - <span class="hljs-number">1</span>]])<br>    dev_display (Region)<br>endfor<br><span class="hljs-keyword">return</span> ()<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>《solution_guide_ii_d_classification》</p>]]></content>
      
      
      <categories>
          
          <category> Halcon 示例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halcon </tag>
            
            <tag> 分类器 </tag>
            
            <tag> 示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 HSmartWindowControl 控件</title>
      <link href="/2019/03/27/Halcon%20&amp;&amp;%20C#%20-%20%E4%BD%BF%E7%94%A8%20HSmartWindowControl%20%E6%8E%A7%E4%BB%B6/"/>
      <url>/2019/03/27/Halcon%20&amp;&amp;%20C#%20-%20%E4%BD%BF%E7%94%A8%20HSmartWindowControl%20%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>从 Halcon 13 开始，MvTech 提供了一个相比于 HWindowControl 更好的控件 – HSmartWindowControl。不过基于版权原因（网上的破解版只提供到 Halcon 12），该控件在各大自动化设备公司都鲜有使用。但是为什么会有新版控件问世呢？显然是为了提高开发效率并且修复相关BUG了，所以使用 HSmartWindowControl 是有意义的。<br><a id="more"></a></p><h1 id="HSmartWindowControl-的优点"><a href="#HSmartWindowControl-的优点" class="headerlink" title="HSmartWindowControl 的优点"></a>HSmartWindowControl 的优点</h1><ul><li>它与其他控件的使用方式一样(例如，它可以嵌入选项卡控件或滚动查看器，或者与其他控件重叠)。</li><li>提供预定义的鼠标交互(移动窗口内容和使用鼠标滚轮缩放)。双击窗口可以重置视图。</li><li>控件自动刷新时不闪烁。</li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>要开启控件的缩放功能，还应该添加如下代码：</p><figure class="hljs highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-comment">// HSmartWindowControl 控件实例：WindowControl</span><br><span class="hljs-comment">// HSmartWindowControl 控件实例的 Load 事件：WindowControl_Load</span><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WindowControl_Load</span>(<span class="hljs-params"><span class="hljs-keyword">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    <span class="hljs-keyword">this</span>.MouseWheel += my_MouseWheel;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">my_MouseWheel</span>(<span class="hljs-params"><span class="hljs-keyword">object</span> sender, MouseEventArgs e</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 转换鼠标坐标，使它们相对于 HSmartWindowControl 的左上角。</span><br>    Point pt = WindowControl.Location;<br>    MouseEventArgs newe = <span class="hljs-keyword">new</span> MouseEventArgs(e.Button, e.Clicks, <br>                                                e.X - pt.X, e.Y - pt.Y, e.Delta);<br>    WindowControl.HSmartWindowControl_MouseWheel(sender, newe);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>Halcon Doc - Programmer’s Guide</p>]]></content>
      
      
      <categories>
          
          <category> Halcon &amp;&amp; C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halcon </tag>
            
            <tag> C# </tag>
            
            <tag> HSmartWindowControl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo &amp;&amp; aria 博文置顶</title>
      <link href="/2019/03/26/hexo%20&amp;&amp;%20aria%20-%20%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6/"/>
      <url>/2019/03/26/hexo%20&amp;&amp;%20aria%20-%20%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6/</url>
      
        <content type="html"><![CDATA[<p>关于 hexo 框架的博文置顶信息，网上还是挺多的，但是一来大多方法比较繁琐，二来貌似没有关于 aria 主题的置顶信息，所以我经过实践，写了这个博文。<br><a id="more"></a></p><h1 id="Step-by-Step"><a href="#Step-by-Step" class="headerlink" title="Step by Step"></a>Step by Step</h1><ul><li>安装插件 <a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener">hexo-generator-index-pin-top</a></li><li>修改主题配置（在文章标题下面添加“置顶”字样）<br>（1）找到配置文件 <code>\themes\aria\layout\index.njk</code><br>（2）定位到 <code>&lt;div class=&quot;post-meta&quot;&gt;</code><br>（3）添加如下信息  <figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% if post.top %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-thumb-tack"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">7D26CD</span>&gt;</span>置顶<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post-meta-divider"</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://wangwlj.com/2018/01/09/blog_pin_post/" target="_blank" rel="noopener">Hexo博客彻底解决置顶问题</a><br><a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener">Hexo置顶插件hexo-generator-index-pin-top</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> aria theme </tag>
            
            <tag> 置顶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>塑料物体表面缺陷检测</title>
      <link href="/2019/03/25/Halcon%20%E7%A4%BA%E4%BE%8B%20-%20%E8%A1%A8%E9%9D%A2%E6%A3%80%E6%B5%8B%E7%9A%84%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/03/25/Halcon%20%E7%A4%BA%E4%BE%8B%20-%20%E8%A1%A8%E9%9D%A2%E6%A3%80%E6%B5%8B%E7%9A%84%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>例程：detect_indent_fft.hdev<br>说明：这个程序展示了如何利用快速傅里叶变换（FFT）对塑料制品的表面进行目标（缺陷）的检测。<a id="more"></a>  </p><h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><p>物体表面的缺陷在频域中属于高频信号，将图像转到频域，进行低通滤波之后，回到空间域，就可以过滤掉该缺陷，再通过形态学标识出缺陷位置。<br>该方案适用于处理表面均匀的物体。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs halcon">* This program demonstrates how to detect small texture<br>* defects on the surface of plastic items by using the fast<br>* fourier transform (FFT).<br>* First, we construct a suitable filter using Gaussian<br>* filters. Then, the images and the filter are convolved<br>* by using fast fourier transforms. Finally, the defects<br>* are detected in the filtered images by using<br>* morphology operators.<br>*<br>* Initializations<br>dev_update_off ()<br>* dev_updata_pc(‘off’) 关闭更新程序计数器<br>* dev_updata_var(‘off’) 关闭更新变量窗口<br>* dev_updata_window(‘off’) 关闭更新图像窗口<br>dev_close_window ()<br>read_image (Image, &apos;plastics/plastics_01&apos;)<br>get_image_size (Image, Width, Height)<br>dev_open_window (0, 0, Width, Height, &apos;black&apos;, WindowHandle)<br>set_display_font (WindowHandle, 14, &apos;mono&apos;, &apos;true&apos;, &apos;false&apos;)<br>dev_set_draw (&apos;margin&apos;)<br>dev_set_line_width (3)<br>dev_set_color (&apos;red&apos;)<br>* <br>* Optimize the fft speed for the specific image size<br>* 通过图像尺寸对 fft 进行加速<br>optimize_rft_speed (Width, Height, &apos;standard&apos;)<br>* <br>* Construct a suitable filter by combining two gaussian filters<br>* 通过对比两个高斯滤波器来构造一个合适的滤波器<br>Sigma1 := 10.0<br>Sigma2 := 3.0<br>gen_gauss_filter (GaussFilter1, Sigma1, Sigma1, 0.0, &apos;none&apos;, &apos;rft&apos;, Width, Height)<br>gen_gauss_filter (GaussFilter2, Sigma2, Sigma2, 0.0, &apos;none&apos;, &apos;rft&apos;, Width, Height)<br>sub_image (GaussFilter1, GaussFilter2, Filter, 1, 0)<br>* <br>* Process the images iteratively<br>NumImages := 11<br>for Index := 1 to NumImages by 1<br>    * <br>    * Read an image and convert it to gray values<br>    read_image (Image, &apos;plastics/plastics_&apos; + Index$&apos;02&apos;)<br>    rgb1_to_gray (Image, Image)<br>    * Perform the convolution in the frequency domain<br>    rft_generic (Image, ImageFFT, &apos;to_freq&apos;, &apos;none&apos;, &apos;complex&apos;, Width)<br>    convol_fft (ImageFFT, Filter, ImageConvol)<br>    rft_generic (ImageConvol, ImageFiltered, &apos;from_freq&apos;, &apos;n&apos;, &apos;real&apos;, Width)<br>    * <br>    * Process the filtered image<br>    * 用一个矩形掩膜计算图像上每个点的灰度范围<br>    gray_range_rect (ImageFiltered, ImageResult, 10, 10)<br>    * 获取图像中的最大、最小灰度值<br>    min_max_gray (ImageResult, ImageResult, 0, Min, Max, Range)<br>    * 在 5.55 和 最大灰度值 * 0.8 之间选择大的数进行阈值，即寻找灰度值大于 5.55 / 0.8 的区域<br>    threshold (ImageResult, RegionDynThresh, max([5.55,Max * 0.8]), 255)<br>    connection (RegionDynThresh, ConnectedRegions)<br>    select_shape (ConnectedRegions, SelectedRegions, &apos;area&apos;, &apos;and&apos;, 4, 99999)<br>    union1 (SelectedRegions, RegionUnion)<br>    closing_circle (RegionUnion, RegionClosing, 10)<br>    connection (RegionClosing, ConnectedRegions1)<br>    select_shape (ConnectedRegions1, SelectedRegions1, &apos;area&apos;, &apos;and&apos;, 10, 99999)<br>    area_center (SelectedRegions1, Area, Row, Column)<br>    * <br>    * Display the results<br>    dev_display (Image)<br>    Number := |Area|<br>    if (Number)<br>        gen_circle_contour_xld (ContCircle, Row, Column, gen_tuple_const(Number,30), gen_tuple_const(Number,0), gen_tuple_const(Number,rad(360)), &apos;positive&apos;, 1)<br>        ResultMessage := [&apos;Not OK&apos;,Number + &apos; defect(s) found&apos;]<br>        Color := [&apos;red&apos;,&apos;black&apos;]<br>        dev_display (ContCircle)<br>    else<br>        ResultMessage := &apos;OK&apos;<br>        Color := &apos;forest green&apos;<br>    endif<br>    disp_message (WindowHandle, ResultMessage, &apos;window&apos;, 12, 12, Color, &apos;true&apos;)<br>    if (Index != NumImages)<br>        disp_continue_message (WindowHandle, &apos;black&apos;, &apos;true&apos;)<br>        stop ()<br>    endif<br>endfor<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon 示例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表面检测 </tag>
            
            <tag> 塑料物体 </tag>
            
            <tag> 快速傅里叶变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的技能</title>
      <link href="/2019/03/25/Others%20-%20%E6%88%91%E7%9A%84%E6%8A%80%E8%83%BD/"/>
      <url>/2019/03/25/Others%20-%20%E6%88%91%E7%9A%84%E6%8A%80%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>再忙也应该整理、总结自己的知识，不然一切都会变成过眼云烟。<br><a id="more"></a></p><p><img src="/images/我的技能.png" alt="我的技能.png"></p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人信息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>边缘检测</title>
      <link href="/2019/03/25/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%20-%20%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/"/>
      <url>/2019/03/25/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%20-%20%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>边缘检测（英语：Edge detection）标识数字图像中亮度变化明显的点。<br><a id="more"></a></p><h1 id="（一）分类"><a href="#（一）分类" class="headerlink" title="（一）分类"></a>（一）分类</h1><ul><li>一阶梯度算法：Robert、Sobel、Prewitt、Canny</li><li>二阶梯度算法：Marr-Hildreth</li></ul><h1 id="（二）比较"><a href="#（二）比较" class="headerlink" title="（二）比较"></a>（二）比较</h1><h2 id="1-定位精度"><a href="#1-定位精度" class="headerlink" title="1. 定位精度"></a>1. 定位精度</h2><p>(1) Robert算法边缘定位精度较高，但容易丢失部分边缘。</p><p>(2) Sobel算法和Prewitt算法的边缘定位较准确且完整，但容易出现边缘多像素宽度。</p><p>(3) Canny算法效果较好，边缘定位准确性高，边缘较细，提取完整。</p><h2 id="2-边缘连接程度"><a href="#2-边缘连接程度" class="headerlink" title="2. 边缘连接程度"></a>2. 边缘连接程度</h2><p>(1) Robert的边缘连接程度较差，存在的错检漏检情况较多；</p><p>(2) Sobel和Prewitt其次；</p><p>(3) Canny的边缘线形连接程度最好，效果最佳，计算结果与人类视觉特性很吻合。</p><h2 id="3-抗噪性能"><a href="#3-抗噪性能" class="headerlink" title="3. 抗噪性能"></a>3. 抗噪性能</h2><p>(1) Roberts算法没经过图像平滑计算，对噪声较敏感，但对灰度变化陡峭的低噪声图像处理效果较好，处理对比度低且较暗图像的能力较差。</p><p>(2) Sobel算法和Prewitt算法都是对图像进行差分和滤波运算，只是平滑部分的权值有些差异，因此，对噪声具有一定抑制能力，但所得图像会有些模糊。</p><p>(3) Canny算法抗噪能力最佳，边缘定位准确性较好。</p><h2 id="4-运算速度："><a href="#4-运算速度：" class="headerlink" title="4. 运算速度："></a>4. 运算速度：</h2><p>(1) Robert算法简单，运算速度最快；</p><p>(2) Sobel算法和Prewitt算法较复杂，运算时间较长；</p><p>(3) Canny算法的运算量最大，耗时最多。</p><h1 id="（三）参考"><a href="#（三）参考" class="headerlink" title="（三）参考"></a>（三）参考</h1><p>[1] 陈彦燕, 王元庆. 常用边缘检测算法的定量比较. 计算机工程, 2008,1000—3428(2008)17—0202—03.</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 边缘检测 </tag>
            
            <tag> canny </tag>
            
            <tag> sobel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Halcon &amp;&amp; C# 联合编程时的内存管理</title>
      <link href="/2019/03/19/Halcon%20&amp;&amp;%20C#%20-%20Halcon%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2019/03/19/Halcon%20&amp;&amp;%20C#%20-%20Halcon%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>C# 拥有强大的垃圾回收机制，这时优点，但有时候太过依赖它，反而会使我们失去了处理一些第三方对象的能力。而在 Halcon 与 C# 的联合编程中，Halcon 对象的内存管理便是很多人头痛的事情了。<br><a id="more"></a></p><h1 id="有无手动释放-Halcon-对象的对比"><a href="#有无手动释放-Halcon-对象的对比" class="headerlink" title="有无手动释放 Halcon 对象的对比"></a>有无手动释放 Halcon 对象的对比</h1><p>如果没有做好 Halcon 对象的及时释放时，便会发生内存泄漏问题，未释放的对象在内存中不断累积，当然，它不会无限累计下去， C# 会在适当的时候自动强制释放所有无用的对象。整个过程如下图所示。<br><img src="/images/Halcon内存泄漏.PNG" alt="Halcon内存泄漏.PNG"><br>同样的代码，当我们及时手动释放 Halcon 对象时，结果如下图所示，可以明显看出有没有及时手动释放 Halcon 对象的优劣。<br><img src="/images/Halcon内存管理.PNG" alt="Halcon内存管理.PNG"></p><h1 id="手动释放-Halcon-对象的正确姿势"><a href="#手动释放-Halcon-对象的正确姿势" class="headerlink" title="手动释放 Halcon 对象的正确姿势"></a>手动释放 Halcon 对象的正确姿势</h1><p>那么在什么时候释放 Halcon 对象呢？</p>]]></content>
      
      
      <categories>
          
          <category> Halcon &amp;&amp; C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halcon </tag>
            
            <tag> C# </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取Byte[]类型数据的指针</title>
      <link href="/2019/03/15/C#%20-%20%E8%8E%B7%E5%8F%96Byte%5B%5D%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8C%87%E9%92%88/"/>
      <url>/2019/03/15/C#%20-%20%E8%8E%B7%E5%8F%96Byte%5B%5D%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<p>使用AVT相机SDK编程时，只能取回图像的Byte数据，而生成HImage需要图像数据的指针，所以需要这样的代码。<br><a id="more"></a></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="hljs highlight C#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// using System.Runtime.InteropServices;</span><br><br>GCHandle imgHandle = GCHandle.Alloc(imgdata, GCHandleType.Pinned);<br>IntPtr imgAddr = imgHandle.AddrOfPinnedObject();<br>imgHandle.Free();<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
            <tag> Byte数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在派生类中引发基类事件</title>
      <link href="/2019/03/14/C#%20-%20%E5%9C%A8%E6%B4%BE%E7%94%9F%E7%B1%BB%E4%B8%AD%E5%BC%95%E5%8F%91%E5%9F%BA%E7%B1%BB%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/03/14/C#%20-%20%E5%9C%A8%E6%B4%BE%E7%94%9F%E7%B1%BB%E4%B8%AD%E5%BC%95%E5%8F%91%E5%9F%BA%E7%B1%BB%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>首先，你必须知道以下规则：</p><ul><li>事件是特殊类型的委托，只能从声明它们的类中进行调用。 派生类不能直接调用在基类中声明的事件。</li><li>不要在基类中声明虚拟事件并在派生类中重写它们。 C#编译器不会处理这些事件，并且无法预知派生事件的订阅者是否实际上会订阅基类事件。<a id="more"></a></li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>基类<br><figure class="hljs highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseBusiness</span><br>&#123;<br>    <span class="hljs-comment">//声明事件委托</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ProgressEventHandler</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> progress, <span class="hljs-keyword">string</span> msg</span>)</span>;<br>    <span class="hljs-comment">//声明事件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> ProgressEventHandler ProgressEvent;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnProgress</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> progress, <span class="hljs-keyword">string</span> msg</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.ProgressEvent != <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">this</span>.ProgressEvent(progress, msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>派生类<br><figure class="hljs highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyBusiness</span> : <span class="hljs-title">BaseBusiness</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyBusiness</span>(<span class="hljs-params"></span>)</span><br>    &#123;<br>        <span class="hljs-comment">//  可以直接调用基类的方法</span><br>        <span class="hljs-keyword">this</span>.OnProgress(<span class="hljs-keyword">this</span>.OnProgressValue, <span class="hljs-string">"Testing..."</span>);            <br>    &#125;<br><br>    <span class="hljs-comment">//  可以重写基类的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnProgress</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> progress, <span class="hljs-keyword">string</span> msg</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// 在这里添加其他处理代码</span><br>        <span class="hljs-keyword">base</span>.OnProgress(progress, msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes" target="_blank" rel="noopener">《如何：在派生类中引发基类事件（C# 编程指南）》</a></li><li><a href="http://www.cnblogs.com/anjou/archive/2007/06/19/788987.html" target="_blank" rel="noopener">《C# 事件的继承》</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2019/03/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>最近在写一款激光分析软件，其中有一项需求是支持多种品牌的相机取像，第一时间便想到了工厂模式。<br><a id="more"></a></p><h1 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="hljs highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Camera</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Open</span>(<span class="hljs-params"></span>)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AVT_Camera</span> : <span class="hljs-title">Camera</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Open</span>(<span class="hljs-params"></span>)</span><br>    &#123;<br>        System.Diagnostics.Debug.WriteLine(<span class="hljs-string">"AVT Opened."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IDS_Camera</span> : <span class="hljs-title">Camera</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Open</span>(<span class="hljs-params"></span>)</span><br>    &#123;<br>        System.Diagnostics.Debug.WriteLine(<span class="hljs-string">"IDS Opened."</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用。"><a href="#调用。" class="headerlink" title="调用。"></a>调用。</h2><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span><span class="hljs-params">(<span class="hljs-built_in">string</span>[] args)</span><br>    </span>&#123;<br>        Camera m_AVT_Camera;<br>        m_AVT_Camera = <span class="hljs-keyword">new</span> AVT_Camera();<br>        m_AVT_Camera.Open();<br><br>        Camera m_IDS_Camera;<br>        m_IDS_Camera = <span class="hljs-keyword">new</span> IDS_Camera();<br>        m_IDS_Camera.Open();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在一般代码中，我们可以自己根据自己的需求创建相应的实例，不过这样会造成一个后果，就是调用者与被调用者之间有直接的依赖关系。为了降低对象之间的耦合度，便有了简单工厂模式。</p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="hljs highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 一般代码的基础上添加下面代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">CameraType</span><br>&#123;</span><br>    AVT, IDS<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CameraSimpleFactory</span><br></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Camera CreateCamera(CameraType type)<br>    &#123;<br>        Camera camera;<br>        <span class="hljs-keyword">switch</span> (type)<br>        &#123;<br>            <span class="hljs-keyword">case</span> CameraType.AVT:<span class="hljs-type"></span><br>                camera = <span class="hljs-keyword">new</span> <span class="hljs-type">AVT_Camera</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CameraType.IDS:<span class="hljs-type"></span><br>                camera = <span class="hljs-keyword">new</span> <span class="hljs-type">IDS_Camera</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<span class="hljs-type"></span><br>                camera = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> camera;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="hljs highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Program</span><br>&#123;<br>    static void <span class="hljs-type">Main</span>(<span class="hljs-title">string</span>[] <span class="hljs-title">args</span>)<br>    &#123;<br>        <span class="hljs-type">Camera</span> m_AVT_Camera;<br>        m_AVT_Camera = <span class="hljs-type">CameraSimpleFactory</span>.<span class="hljs-type">CreateCamera</span>(<span class="hljs-type">CameraType</span>.<span class="hljs-type">AVT</span>);<br>        m_AVT_Camera.<span class="hljs-type">Open</span>();<br><br>        <span class="hljs-type">Camera</span> m_IDS_Camera;<br>        m_IDS_Camera = <span class="hljs-type">CameraSimpleFactory</span>.<span class="hljs-type">CreateCamera</span>(<span class="hljs-type">CameraType</span>.<span class="hljs-type">IDS</span>);<br>        m_IDS_Camera.<span class="hljs-type">Open</span>();<br>    &#125;<br>&#125;</span><br></code></pre></td></tr></table></figure><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>可以看到创建实例的逻辑被转移了，优点是责任分割和解耦。但是简单工厂有一个问题，就是当你想要新增一个产品实例的时候，必须修改代码，系统扩展性比较差。于是工厂模式应运而生。</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="hljs highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 一般代码的基础上添加下面代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CameraFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Camera <span class="hljs-title">CreateCamera</span>(<span class="hljs-params"></span>)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AVT_CameraFactory</span> : <span class="hljs-title">CameraFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> Camera <span class="hljs-title">CreateCamera</span>(<span class="hljs-params"></span>)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AVT_Camera();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IDS_CameraFactory</span> : <span class="hljs-title">CameraFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> Camera <span class="hljs-title">CreateCamera</span>(<span class="hljs-params"></span>)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> IDS_Camera();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h2><figure class="hljs highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">class Program<br>&#123;<br>    static void Main(string[] args)<br>    &#123;<br>        AVT_CameraFactory m_AVT_CameraFactory = new AVT_CameraFactory()<span class="hljs-comment">;</span><br>        Camera m_AVT_Camera<span class="hljs-comment">;</span><br>        m_AVT_Camera = m_AVT_CameraFactory.CreateCamera()<span class="hljs-comment">;</span><br>        m_AVT_Camera.Open()<span class="hljs-comment">;</span><br><br>        IDS_CameraFactory m_IDS_CameraFactory = new IDS_CameraFactory()<span class="hljs-comment">;</span><br>        Camera m_IDS_Camera<span class="hljs-comment">;</span><br>        m_IDS_Camera = m_IDS_CameraFactory.CreateCamera()<span class="hljs-comment">;</span><br>        m_IDS_Camera.Open()<span class="hljs-comment">;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h2><p>可以看到，我们将实例的创建类给抽象了，然后将具体实例的实现转移到了他的子类中去。这样当我们新增一个产品时，便只需要新增产品具体类和创建该产品实例的工厂具体类，而不需要去修改原有代码，提高了系统的扩展性。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 简单工厂模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类库项目中 HWindowControl 类型的声明异常</title>
      <link href="/2019/03/13/Halcon%20&amp;&amp;%20C#%20-%20%E7%B1%BB%E5%BA%93%E9%A1%B9%E7%9B%AE%E4%B8%ADHWindowControl%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/13/Halcon%20&amp;&amp;%20C#%20-%20%E7%B1%BB%E5%BA%93%E9%A1%B9%E7%9B%AE%E4%B8%ADHWindowControl%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在vs中新建<strong>类库项目</strong>，添加HalconDotNet引用，使用HWindowControl定义变量。<br><a id="more"></a></p><h1 id="1-运行环境（一）"><a href="#1-运行环境（一）" class="headerlink" title="1. 运行环境（一）"></a>1. 运行环境（一）</h1><ul><li>系统 - Windows 10</li><li>Halcon版本 - 12.0.0</li><li>vs版本 - 2015/2017</li></ul><p>编译运行，无任何错误。</p><h1 id="2-运行环境（二）"><a href="#2-运行环境（二）" class="headerlink" title="2. 运行环境（二）"></a>2. 运行环境（二）</h1><ul><li>系统 - Windows 10</li><li>Halcon版本 - 12.0.0</li><li>vs版本 - 2010/2013</li></ul><p>编译错误</p><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">类型“<span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Forms</span><span class="hljs-selector-class">.UserControl</span>”在未被引用的程序集中定义，必须添加对程序集"类型“<span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Forms</span>..."的引用<br></code></pre></td></tr></table></figure><p>解决方式</p><p>添加 <strong>System.Windows.Forms</strong> 引用后编译通过。</p><h1 id="3-解析"><a href="#3-解析" class="headerlink" title="3. 解析"></a>3. 解析</h1><p>这里算不上解析吧，网上也难以找到相关说明，纯属个人推测。HWindowControl这个控件应该是Halcon官方使用 System.Windows.Forms.UserControl 进行定义的，封装成DLL后，由于vs2010和vs2013的编译器不够智能，或者是编译器bug，所以编译出错了。vs2017对编译器进行了改进，识别出了该控件及其引用，或者说修复了这个bug。</p>]]></content>
      
      
      <categories>
          
          <category> Halcon &amp;&amp; C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halcon </tag>
            
            <tag> HWindowControl </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 GitHub Page &amp;&amp; Hexo &amp;&amp; Aria 的建站过程</title>
      <link href="/2019/03/13/hexo%20&amp;&amp;%20aria%20-%20%E5%9F%BA%E4%BA%8EGitHub-Page-&amp;-Hexo-&amp;-Aria%E7%9A%84%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/03/13/hexo%20&amp;&amp;%20aria%20-%20%E5%9F%BA%E4%BA%8EGitHub-Page-&amp;-Hexo-&amp;-Aria%E7%9A%84%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>…说到底，还是喜欢折腾啊。<br><a id="more"></a></p><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><ul><li><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Page</a>（我们将网站托管在这里）</li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git for Window</a>（我们使用它输入各种命令）</li><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>（我们使用它来下载Hexo框架）</li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>（博客框架）</li><li><a href="https://github.com/AlynxZhou/hexo-theme-aria" target="_blank" rel="noopener">Aria</a>（博客主题）</li></ul><h1 id="写作阶段"><a href="#写作阶段" class="headerlink" title="写作阶段"></a>写作阶段</h1><p>文章头部，定义“标题”、“日期”、“分类”、“标签”和“显示大纲截至位置”等。<br><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">基于</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Page</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">Aria</span> <span class="hljs-string">的建站过程</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019</span><span class="hljs-bullet">-03</span><span class="hljs-bullet">-13</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">Web</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Page</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">Hexo</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">Aria</span><br><span class="hljs-meta">---</span><br><br><span class="hljs-string">...说到底，还是喜欢折腾啊。</span><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">more</span> <span class="hljs-bullet">--&gt;</span><br></code></pre></td></tr></table></figure></p><h1 id="进阶阶段"><a href="#进阶阶段" class="headerlink" title="进阶阶段"></a>进阶阶段</h1><p>小白留空~</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub Page </tag>
            
            <tag> Hexo </tag>
            
            <tag> Aria </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index-1.html"/>
      <url>/tags/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
